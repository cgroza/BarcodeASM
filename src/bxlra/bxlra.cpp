#include "BxBamWalker.h"
#include "CTPL/ctpl_stl.h"
#include "LocalAlignment.h"
#include "LocalAssemblyWindow.h"
#include "RegionFileReader.h"
#include "SeqLib/BamRecord.h"
#include "SeqLib/RefGenome.h"
#include "SeqLib/UnalignedSequence.h"
#include <algorithm>
#include <iostream>
#include <iterator>
#include <unistd.h>
#include <vector>
#include <future>

#ifdef DEBUG_MINIMAP
std::string ref("GTCAAAGTAAAGAAAACAAAACGAATCAAAATCCCTGTGCGTTTTCCAGTGAGCTGTAGCCAAGCCGAGTGAATTTTCTGTCTCTTGAATTCTAGGTGCTGAGAACTGATTGGCATCATCATCTTTTGAGAAATTAAACTTTAGTCATA"
                "AAATTTCTATTTGAACTAAAATTATATGACTCAGATATCTTTTGATTTAAACCTAATGACAGCAAATTGCTTCATAGTGGGAATACAGTAATTCTGGATAGGCATGAGGTTTGTATTTTAAAATGAAACGCAGTTTTTGAATTGCAATG"
                "AACAAGAGAATGTAATTAGTCCCAATTGCCAAATCAGAAATTCTGCCAGGAATTTCAAGAAAGGAAAAAAAGAATGGAATCATGTTCAACATCAATGCCAGGGAAAGAATGCTTCCAGAGGCTCGAGGACTCTCCATGGGAAATCAGTT"
                "CCCTCCAGTTCCTTAAATCTCCACAGCCGTACCTTTCATCAACACTGAGCATTTCCTCGATTTTAAAATTCCTGGTTTGGTATTCTGTTTTCCTTTATTAAAACTCCTGTCATTGCTCTAAAATCCCCACCTCCGTTTATAAAGTCTGA"
                "ATGTATGAAGGTCGTGAGGATTTTGTTTTCCAATGGTATCCGATTTTTCCTTTAACGTAACCAGTGAGGAGGAATAGAATAAGGGCTGGACTGGGGCGGCTGGCATCCGAAGTGCTTGCTTGTGAGCTTTTCTTTATCGCTTGTTTGTTTC"
                "CTGGATGTCTGTCTAAGGAGATGCCAGAGTCTGTGTCCTGATAACTTACTGGGTCTGTAAAGTGACTGCTGATGAGAAGCTTCCCCACCACCCCACCATGATTACACTGAAATTCAGAATTCTACCAGAAGACAATTTTCTCAGTTCATCA"
                "CCCTTCCAAGGACATTACATAGGTCTCACTTTCTCAGAGTGAGCAACAGCAAAGCAACATAGAAAGAAGGCACATCAGGCTTCCATCCCTTCCAATTTATATTACTTTGTTTCTCAACTGGCTTTTAAGCTATTGCAAGTATGTATTAATA"
                "TCGTCTCTCTTTGCAAAACTGCTTAGGTCTGAAGACTTGAAAACAAAAACATAGGAATATATATATTTCTTCCAAAGCAAAAGATACATATGTTTTCTTCTCAAGCAATAAAATATTGGGGATAGGTGTCAAAGCATCACATGATTCTAGT"
                "GTCTTATTAAAATTGGTATTTTTCTAGATCCCAGGAGTTCTATGAATAGACAGTAGCATTTCTCTTCATTCTCAATGCCAGCTATGTCTACCTGGAAGAAGAGATATACACTTAAAGCTGGTGGCAAAGGCTACTGAATTGGTTTATAGG"
                "AGAATTCCACTTTGATTATTTTGTTTAGACTTTTTTTGAAAATATTTTATAATCTGTTAAGATTCAACAACATCAGGGAAAAAAAGATCTCAAAAGCGCTATGCTTTACTCAATTTCAGATAATTATGTTAAAAATTGTTTAGAACTACA"
                "ATCAGAGGAAGGTTCTAACTAATTTTTAACAAAATAAAGTCCAACAAGTAGAATTCCATAGAACTGGCTCATTGGCATTTAGCATATGTTAAGAGACAGAATTGTTTTATTTGAAATTGTCATATTTCACCATCCTCAACATTAGGTGAA"
                "TTTTTTTTAAAGTTTCAGTGATCCCAAATGAATTTCTGATTTTCAGTAGAAAATTGCTAAACCTTCATGTTGTCTAGA");

std::string seq("GTCAAAGTAAAGAAAACAAAACGAATCAAAATCCCTGTGCGTTTTCCAGTGAGCTGTAGCCAAGCCGAGTGAATTTTCTGTCTCTTGAATTCTAGGTGCTGAGAACTGATTGGCATCATCATCTTTTGAGAAATTAAACTTTAGTCATA"
                "AAATTTCTATTTGAACTAAAATTATATGACTCAGATATCTTTTGATTTAAACCTAATGACAGCAAATTGCTTCATAGTGGGAATACAGTAATTCTGGATAGGCATGAGGTTTGTATTTTAAAATGAAACGCAGTTTTTGAATTGCAATG"
                "AACAAGAGAATGTAATTAGTCCCAATTGCCAAATCAGAAATTCTGCCAGGAATTTCAAGAAAGGAAAAAAAGAATGGAATCATGTTCAACATCAATGCCAGGGAAAGAATGCTTCCAGAGGCTCGAGGACTCTCCATGGGAAATCAGTT"
                "CCCTCCAGTTCCTTAAATCTCCACAGCCGTACCTTTCATCAACACTGAGCATTTCCTCGATTTTAAAATTCCTGGTTTGGTATTCTGTTTTCCTTTATTAAAACTCCTGTCATTGCTCTAAAATCCCCACCTCCGTTTATAAAGTCTGA"
                "ATGTATGAAGGTCGTGAGGATTTTGTTTTCCAATGGTATCCGATTTTTCCTTTAACGTAACCAGTGAGGAGGAATAGAATAAGGGCTGGACTGGGGCGGCTGGCATCCGAAGTGCTTGCTTGTGAGCTTTTCTTTATCGCTTGTTTGTTTC"
                //insertion
                "TCAAAGTAAAGAAAACAAAACGAATCAAAATCCCTGTGCGTTTTCCAGTGAGCTGTAGCCAAGCCGAGTGAATTTTCTGTCTCTTGAATTCTAGGTGCTGAGAACTGATTGGCATCATCATCTTTTGAGAAATTAAACTTTAGTCATAAAA"
                "TTTCTATTTGAACTAAAATTATATGACTCAGATATCTTTTGATTTAAACCTAATGACAGCAAATTGCTTCATAGTGGGAATACAGTAATTCTGGATAGGCATGAGGTTTGTATTTTAAAATGAAACGCAGTTTTTGAATTGCAATGAAC"
                //reference
                "CTGGATGTCTGTCTAAGGAGATGCCAGAGTCTGTGTCCTGATAACTTACTGGGTCTGTAAAGTGACTGCTGATGAGAAGCTTCCCCACCACCCCACCATGATTACACTGAAATTCAGAATTCTACCAGAAGACAATTTTCTCAGTTCATCA"
                "CCCTTCCAAGGACATTACATAGGTCTCACTTTCTCAGAGTGAGCAACAGCAAAGCAACATAGAAAGAAGGCACATCAGGCTTCCATCCCTTCCAATTTATATTACTTTGTTTCTCAACTGGCTTTTAAGCTATTGCAAGTATGTATTAATA"
                "TCGTCTCTCTTTGCAAAACTGCTTAGGTCTGAAGACTTGAAAACAAAAACATAGGAATATATATATTTCTTCCAAAGCAAAAGATACATATGTTTTCTTCTCAAGCAATAAAATATTGGGGATAGGTGTCAAAGCATCACATGATTCTAGT"
                "GTCTTATTAAAATTGGTATTTTTCTAGATCCCAGGAGTTCTATGAATAGACAGTAGCATTTCTCTTCATTCTCAATGCCAGCTATGTCTACCTGGAAGAAGAGATATACACTTAAAGCTGGTGGCAAAGGCTACTGAATTGGTTTATAGG"
                "AGAATTCCACTTTGATTATTTTGTTTAGACTTTTTTTGAAAATATTTTATAATCTGTTAAGATTCAACAACATCAGGGAAAAAAAGATCTCAAAAGCGCTATGCTTTACTCAATTTCAGATAATTATGTTAAAAATTGTTTAGAACTACA"
                "ATCAGAGGAAGGTTCTAACTAATTTTTAACAAAATAAAGTCCAACAAGTAGAATTCCATAGAACTGGCTCATTGGCATTTAGCATATGTTAAGAGACAGAATTGTTTTATTTGAAATTGTCATATTTCACCATCCTCAACATTAGGTGAA"
                "TTTTTTTTAAAGTTTCAGTGATCCCAAATGAATTTCTGATTTTCAGTAGAAAATTGCTAAACCTTCATGTTGTCTAGA");
#endif

namespace opt {
std::string bam_path;
std::string bx_bam_path;
std::string regions_path;
std::string reference_path;
size_t num_threads = 1;
bool weird_reads_only = true;
} // namespace opt

int main(int argc, char **argv) {

  #ifdef DEBUG_MINIMAP
    std::cerr << "DEBUG_MINIMAP" << std::endl;
    LocalAlignment test_aln(ref);
    SeqLib::UnalignedSequence insertion_seq("insertion", seq);
    SeqLib::UnalignedSequenceVector test_seqs;
    test_seqs.push_back(insertion_seq);
    test_aln.align(test_seqs);
    test_aln.writeAlignments(std::cerr);
    return 0;
  #endif

  opterr = 0;
  int c;
  while ((c = getopt(argc, argv, "ab:B:r:g:")) != -1)
    switch (c) {
    case 'b':
      opt::bam_path = optarg;
      break;
    case 'B':
      opt::bx_bam_path = optarg;
      break;
    case 'r':
      opt::regions_path = optarg;
      break;
    case 'a':
      opt::weird_reads_only = false;
      break;
    case 'g':
      opt::reference_path = optarg;
      break;
    default:
      abort();
    }

  opt::num_threads = 4;

  ctpl::thread_pool thread_pool(opt::num_threads);

  SeqLib::BamReader bam_reader = SeqLib::BamReader();
  bam_reader.Open(opt::bam_path);
  RegionFileReader region_reader(opt::regions_path, bam_reader.Header());

  // std::vector<std::future<std::pair<LocalAssemblyWindow, LocalAlignment>>*> output;

  for (auto region : region_reader.getRegions()) {
      auto future = thread_pool.push([region](int id) {

      std::cerr << "ID " << id << std::endl;
      SeqLib::RefGenome ref_genome;
      bool load_ref = ref_genome.LoadIndex(opt::reference_path);
      std::cerr << "Loaded " << opt::reference_path << ": " << load_ref << std::endl;

      SeqLib::BamReader thread_bam_reader;
      thread_bam_reader.Open(opt::bam_path);

      BxBamWalker thread_bx_bam_walker(opt::bx_bam_path, "0000", opt::weird_reads_only);

      LocalAssemblyWindow *local_win = new LocalAssemblyWindow(region, thread_bam_reader, thread_bx_bam_walker);

      local_win -> assembleReads();
      std::cerr << "Reads: " << local_win -> getReads().size() << std::endl;
      std::cerr << "Contigs: " << local_win -> getContigs().size() << std::endl;
      local_win -> writeContigs();
      LocalAlignment *local_alignment = new LocalAlignment(region.ChrName(thread_bam_reader.Header()),
                                                        region.pos1, region.pos2, ref_genome);
      local_alignment -> align(local_win -> getContigs());
      local_alignment -> writeAlignments(std::cerr);
      return std::pair<LocalAssemblyWindow*, LocalAlignment*>(local_win, local_alignment);
    });
  }

  thread_pool.stop(true);
  bam_reader.Close();
}
